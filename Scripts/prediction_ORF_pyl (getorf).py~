#!/usr/bin/python2.7 

from Bio import SeqIO 
from Bio import SeqRecord 
from Bio.Seq import Seq 
from Bio.SeqRecord import SeqRecord
from Bio.Alphabet import generic_protein
import re 
import os 

##########
#METHODES#
##########

#Dans le fichier .fasta contenant tous les CDS predits, recupere uniquement les CDS se terminant par TAG et les trie en fonction du brin sur lequel ils se trouvent 
def recuperer_cds_position_tag_tri(fichier_cds,sortie_cds_normal,sortie_cds_complement,sortie_position_normal,sortie_position_complement):
	out_position_normal=open(sortie_position_normal,"w") 
	out_position_complement=open(sortie_position_complement,"w") 	
	liste_seq_complement=[] #initialise liste cds du brin -
	liste_seq_normal=[] #initialise liste cds du brin + 
	for record in SeqIO.parse(fichier_cds,"fasta"): #parcours du fichier de tous les CDS 
		if (re.search(r"TAG$",str(record.seq))): #si se termine par TAG 
			split_description=record.description.split(" ") #split de la description pour recuperer les positions 
			position=split_description[1]
			split_position=position.split("-") 
			start=split_position[0]
			start=start.replace("[","") 
			start=start.replace(" ","") 
			end=split_position[1] 
			end=end.replace("]","") 
			end=end.replace(" ","") 
			position=start+".."+end 
			if (split_description[2]=="(REVERSE SENS)"): #si brin moins 
				liste_seq_complement.append(record) # ajoute le cds a la bonne liste 
				out_position_complement.write(position+"\n")  #ecrit la position dans le bon fichier 
			else: #sinon si brin plus 
				liste_seq_normal.append(record) #ajout cds a la bonne liste  
				out_position_normal.write(position+"\n") #ecrit la position dans le bon fichier 
	SeqIO.write(liste_seq_complement,sortie_cds_complement,"fasta") #ecrit la liste des CDS brin - dans un fichier fasta 
	SeqIO.write(liste_seq_normal,sortie_cds_normal,"fasta") #ecrit la liste des CDS brin + dans un fichier fasta  	

#Calcul taille genome 
def calculer_taille_genome(genome): 
	record=SeqIO.read(genome,"fasta") 
	return len(record)  

#Cree un fichier contenant les positions des regions intergenique. Pour le brin +, il faut taille du genome comme valeur pour le dernier end (fin du dernier CDS->fin du genome) 
def recuperer_position_intergenique_normal(fichier_position_cds, sortie_position_intergenique,taille_genome):
	input_position_cds=open(fichier_position_cds,"r") 
	output_position_intergenique=open(sortie_position_intergenique,"w")
	all_position="" 
	for position in input_position_cds : #parcours du fichier 
		position=position.replace("\n","") #suppression sauts de ligne 
		all_position=all_position+position+" " #concatenation de toutes les positions, pour avoir une seule chaine de caractere avec toutes les positions
	split_position=all_position.split("..") #split de la ligne par rapport a .. => un element de la liste = une position intergenique   
	for i,position_intergenique in enumerate(split_position): 
		if not i==0: #on ne garde pas la premiere ligne qui correspond au debut du premier cds, pas besoin de recuperer entre debut du genome et debut du premier CDS   		
			split_intergenique=position_intergenique.split(" ") #split par rapport a l'espace pour separer start et end  
			start=split_intergenique[0]
			end=split_intergenique[1]
			if end=='': #si end est vide (derniere ligne, on a uniquement la fin du dernier CDS, donc le debut de la region intergenique)  
				end=taille_genome+1
			start=int(start)+1
			end=int(end)-1
			position_intergenique=str(start)+".."+str(end) #ecriture propre des positions  
			output_position_intergenique.write(position_intergenique+"\n")

#Cree un fichier contenant les positions des regions intergeniques du brin -. Attention pour le brin - : dans le fichier des CDS les sequences sont reverse complementees. Si on veut ensuite recuperer les bons genes a partir du genome il faut bien prendre chaque region intergenique en AMONT des CDS (contrairement au brin+ ou on prend les regions intergeniques en aval pour chaque cds) 
def recuperer_position_intergenique_complement(fichier_position_cds, sortie_position_intergenique):
	input_position_cds=open(fichier_position_cds,"r") 
	output_position_intergenique=open(sortie_position_intergenique,"w") 
	all_position="" 
	for position in input_position_cds : 
		position=position.replace("\n","")
		all_position=all_position+position+" " 
	split_position=all_position.split("..") 
	split_position[0]="0 "+split_position[0] #pour la premiere position, ajout d'un 0 en start, la premiere region intergenique = debut genome->debut du premier CDS 
	for i,position_intergenique in enumerate(split_position) :
		if i<len(split_position)-1: #elimination de la derniere ligne correspondant a la fin du dernier cds, pas besoin de prendre ce qu'il y a en aval			
			split_intergenique=position_intergenique.split(" ") #split par rapport a l'espace pour separer start et end  
			start=split_intergenique[0]
			end=split_intergenique[1]
			start=int(start)+1
			end=int(end)-1
			position_intergenique=str(start)+".."+str(end)
			output_position_intergenique.write(position_intergenique+"\n")
			
#A partir du genome complet et des positions des CDS, recupere les regions intergeniques pour le brin+  
def recuperer_region_intergenique_normal(genome,fichier_position_intergenique_normal,sortie_region_intergenique_normal):
	record=SeqIO.read(genome,"fasta") 
	input_intergenique=open(fichier_position_intergenique_normal,"r") 
	liste_region_intergenique=[]
	count=0
	for position in input_intergenique: 
		count+=1
		split_position=position.split("..") 
		start=split_position[0]
		end=split_position[1]
		end=end.replace("\n","")
		print start 
		print end 
		region_intergenique=record[int(start):int(end)]
		region_intergenique.description="intergen CDS "+str(count)+"_"+str(count+1) 
		liste_region_intergenique.append(region_intergenique) 
	SeqIO.write(liste_region_intergenique,sortie_region_intergenique_normal,"fasta") 


#A partir du genome complet et des positions des CDS, recupere les regions intergeniques pour le brin- (besoin de reverse-complementer) 
def recuperer_region_intergenique_complement(genome,fichier_position_intergenique_complement,sortie_region_intergenique): 
	record=SeqIO.read(genome,"fasta") 
	input_intergenique=open(fichier_position_intergenique_complement,"r") 
	liste_region_intergenique=[]
	count=0
	for position in input_intergenique: 
		count+=1
		split_position=position.split("..") 
		start=split_position[0]
		end=split_position[1]
		end=end.replace("\n","")
		print start 
		print end 
		region_intergenique=record[int(start):int(end)]
		region_intergenique_rc=region_intergenique.reverse_complement()
		region_intergenique_rc.id=region_intergenique.id 
		region_intergenique_rc.description="intergen CDS "+str(count)+"_"+str(count+1) 
		liste_region_intergenique.append(region_intergenique_rc) 
	SeqIO.write(liste_region_intergenique,sortie_region_intergenique,"fasta") 

#Creation d'une liste des codons d'une sequence (separe la seq par 3) 
def creer_liste_codons(sequence):
	list_codon=[]
	while (len(sequence)!=0): #tant que la sequence contient quelque chose 
		codon=sequence[:3] #recupere les 3 premiers nt 
		sequence=sequence[3:] #elimine les 3 premiers nt 
		if (len(codon)==3): #ajoute a la liste uniquement si le codon contient 3 nt 
			codon_str=str(codon.seq)
			list_codon.append(codon_str)
	return list_codon

#Recherche du premier codon stop a partir d'une liste de codon 
def recherche_codon_stop(list_codon):
	continuer='vrai' 
	i=0 
	while(continuer=='vrai'): 
		if list_codon[i]=='TAG': 
			continuer='faux' 
			return i,"tag" 
		elif list_codon[i]=='TAA' or list_codon[i]=='TGA': 
			continuer='faux' 
			return i,"taa,tga" 
		i+=1 	
	return "-1"

#Traduction en prot d'un fichier fasta nucleique 
def traduction_proteine(fichier_fasta,fichier_sortie):
	liste_prot=[] 
	for record in SeqIO.parse(fichier_fasta,"fasta"): 
		seq_prot=record.seq.translate() 
		record_prot=SeqRecord(seq_prot,id=record.id,description=record.description) 
		liste_prot.append(record_prot) 
	SeqIO.write(liste_prot,fichier_sortie,"fasta")

#Traduction en prot en prenant en compte que les TAG pas a la fin codent pour pyrrolysine 
def trad_pyrrolysine(fasta_prot,sortie): 
	liste_prot=[]	
	for record in SeqIO.parse(fasta_prot,"fasta"): 
		prot=''
		prot=str(record.seq).replace("*","O") 
		prot=prot[:-1]
		prot+="*" 
		prot_seq=Seq(prot,generic_protein) 
		record_prot=SeqRecord(prot_seq,id=record.id,description=record.description) 
		liste_prot.append(record_prot) 
	SeqIO.write(liste_prot,sortie,"fasta") 

#Traduction (avc pyrrolysine) de tous les fichier fasta d'un dossier 
def traduction_tout_dossier(dossier,dossier_sortie_prot,dossier_sortie_prot_pyl): 
	for file in os.listdir(dossier):
		path_file=dossier+file
		if(os.path.isfile(path_file)):
			nom=file.replace(".fasta","") 
			path_sortie=dossier_sortie_prot+nom+"_protein.fasta"
			traduction_proteine(path_file,path_sortie) 
			trad_pyrrolysine(path_sortie,dossier_sortie_prot_pyl+nom+"_proteinPYL.fasta") 

#Recupere position allant du debut de la region intergenique jusqu'a la fin du CDS (brin -)
def recuperer_position_intergen_cds_complement(fichier_position_cds,fichier_position_intergen,fichier_sortie): 
	in_cds=open(fichier_position_cds,"r") 
	in_intergen=open(fichier_position_intergen,"r") 
	out_position=open(fichier_sortie,"w")
	list_start=[] #initialise liste des starts 
	list_end=[] #initialise liste des ends 
	i=0 #initialise compteur while 
	for cds in in_cds: #parcours des positions cds 
		split_cds=cds.split("..") #separation debut/fin du cds 
		end=split_cds[1] #fin de la region a recuperer=fin du cds 
		list_end.append(end) 
	for intergen in in_intergen: #parcours des positions intergeniques 
		split_intergen=intergen.split("..") #separation debut/fin region intergenique  
		start=split_intergen[0] #debut region a recuperer=debut region intergenique 
		list_start.append(start)
	while(i<len(list_start)): 
		position=list_start[i]+".."+list_end[i] #position de chaque region 
		out_position.write(position) #ecriture dans le fichier	
		i+=1 

#Recupere position allant du debut du cds jusqu'au debut du suivant (brin+) 
def recuperer_position_intergen_cds_normal(fichier_position_cds,fichier_position_intergen,fichier_sortie):
	in_cds=open(fichier_position_cds,"r")
	in_intergen=open(fichier_position_intergen,"r")  
	out_position=open(fichier_sortie,"w")
	list_start=[]
	list_end=[]
	i=0 
	for cds in in_cds:  
		split_cds=cds.split("..") #separation debut/fin du cds 
		start=split_cds[0] #debut de la region a recuperer=debut du cds
		list_start.append(start)
	for intergen in in_intergen: 
		split_intergen=intergen.split("..") 
		end=split_intergen[1] #fin de la region = fin de la region intergenique-1 		
		list_end.append(end) 
	while(i<len(list_start)): 
		position=list_start[i]+".."+list_end[i]
		out_position.write(position)	
		i+=1  

#Recupere les regions cds+intergenique dans le genome 
def recup_region_intergen_cds(genome,fichier_position,fichier_sortie):
	record=SeqIO.read(genome,"fasta") #lecture sequence genomique  
	input_intergenique=open(fichier_position,"r") #lecture fichier positions 
	liste_region_a_conserver=[] #initialisation liste des regions 
	count=0 
	for position in input_intergenique: 
		count+=1 #incrementation a chaque nouvelle position 
		split_position=position.split("..") #split des positions pour separer debut/fin 
		start=split_position[0]
		end=split_position[1]
		end=end.replace("\n","") 
		region=record[int(start)-1:int(end)] #recuperation de la sequence sur le genome 
		region.description="CDS+intergenique "+str(count) #ajout a la description de "CDS+intergenique numero position"  
		liste_region_a_conserver.append(region) #ajout de l'objet SeqRecord a la liste   
	SeqIO.write(liste_region_a_conserver,fichier_sortie,"fasta") #ecriture du fasta de sortie 


#Reverse complemente un fichier fasta entier 
def reverse_complementation_fichier_fasta(fichier_fasta,fichier_sortie): 
	liste_record_rc=[]
	for record in SeqIO.parse(fichier_fasta,"fasta"): 
		record_rc=record.reverse_complement()
		record_rc.id=record.id 
		record_rc.description=record.description
		liste_record_rc.append(record_rc)  
	SeqIO.write(liste_record_rc,fichier_sortie,"fasta") 

#Determine tous les genes possibles (codon tag comme codon stop ou codant, si 2e "stop" = tag, "sauvegarde" du gene et prolongation jusqu'au prochain codon stop
def determiner_genes_possibles(region_intergen_cds,fichier_sortie):
	liste_gene=[]
	for record in SeqIO.parse(region_intergen_cds,"fasta"): #parcours fichier region conversee 
		count_tag=0 #nombre tag 			
		liste_codon=creer_liste_codons(record) #separe la seq en codon 
		position_codon_stop,codon=recherche_codon_stop(liste_codon) #recherche position codon stop et nature 
		position_dernier_nt_stop=(position_codon_stop+1)*3 #donne position du dernier nt prcq on a juste la position du codon 
		gene=record[:position_dernier_nt_stop] #recuperation de la seq du debut au dernier nt du codon stop 
		gene.description=record.description.replace("+intergenique","")+" NO PYL" 
		liste_gene.append(gene) #remplissage tableau genes 
		tag='true' 
		while(tag=='true'): #commence avec le 1er codon qui est forcement un tag  
			count_tag+=1 #incrementation compteur tag 
			liste_codon=liste_codon[position_codon_stop+1:] #coupage du tableau des codons (seq) du premier codon stop a la fin 
			position_codon_stop,codon=recherche_codon_stop(liste_codon) #recherche du prochain codon dans le nouveau tableau 
			position_dernier_nt_stop_2=(position_codon_stop+1)*3 
			position_dernier_nt_stop+=position_dernier_nt_stop_2 #position dernier nt = position dernier nt dans le tableau + position dernier nt d'avant 
			gene=record[:position_dernier_nt_stop] #decoupage du gene du debut au dernier nt 
			gene.description=record.description.replace("+intergenique","")+" PYL "+str(count_tag)
			liste_gene.append(gene) #ajout gene  
			if codon=="taa,tga": #si codon est taa ou tga 
				tag='false' 
	SeqIO.write(liste_gene,fichier_sortie,"fasta") #ecriture de tous les genes dans fichier fasta   
			 

	
######
#MAIN#
######


#GESTION DES FICHIERS#
CDS_predits="./cds_getorf"  
genome_complet="./MalvusMx1201_GENOME_FASTTest_get_ORFA.fsa"
CDS_TAG_plus="./Test_get_ORF/CDS_TAG_plus.fasta" #Contient tous les CDS se terminant par TAG du brin+  
CDS_TAG_moins="./Test_get_ORF/CDS_TAG_moins.fasta" #Contient tous les CDS se terminant par TAG du brin-
position_CDS_TAG_plus="./Test_get_ORF/position_CDS_TAG_plus.txt" #Contient la position sur le genome des CDS TAG du brin+
position_CDS_TAG_moins="./Test_get_ORF/position_CDS_TAG_moins.txt" #Contient la position sur le genome des CDS TAG du brin- 
position_intergenique_plus="./Test_get_ORF/position_intergenique_plus.txt" #Contient les positions des regions intergeniques (entre 2 CDS TAG) sur le genome (brin+) 
position_intergenique_moins="./Test_get_ORF/position_intergenique_moins.txt" #Contient les positions des regions intergeniques (entre 2 CDS TAG) sur le genome (brin-)
position_cds_intergen_plus="./Test_get_ORF/position_CDS_et_region_intergenique_plus.txt" #Contient les positions des regions a conserver (CDS+region intergenique en aval) (brin+) 
position_cds_intergen_moins="./Test_get_ORF/position_CDS_et_region_intergenique_moins.txt" #Contient les positions des regions a conserver (CDS+region intergenique en amont) (brin-) 
region_cds_intergen_plus="./Test_get_ORF/region_CDS_+_region_intergenique_plus.fasta" #Contient les regions a conserver (brin+)  
region_cds_intergen_moins="./Test_get_ORF/region_CDS_+_region_intergenique_moins.fasta" #Contient les regions a conserver (brin-) 
region_cds_intergen_moins_RC="./Test_get_ORF/region_CDS_+_region_intergenique_moins_RC.fasta" #Regions reverse complementees pour le brin -
genes_possibles_plus="./Test_get_ORF/genes_possibles_plus.fasta" #Liste des genes possibles (brin+) 
genes_possibles_moins="./Test_get_ORF/genes_possibles_moins.fasta" #Liste des genes possibles (brin-) 
protein_no_pyl_plus="./Test_get_ORF/proteines_possibles_plus.fasta" #Genes possibles traduits (brin+) 
protein_no_pyl_moins="./Test_get_ORF/proteines_possibles_moins.fasta"#Genes possibles traduits (brin-) 
protein_pyl_plus="./Test_get_ORF/proteines_possibles_PYL_plus.fasta" #Genes possibles traduits avec les tag codants = O (brin+) 
protein_pyl_moins="./Test_get_ORF/proteines_possibles_PYL_moins.fasta" #Genes possibles traduits avec les tag codants = O (brin-)
 
#EXECUTION#

#1. Recuperer les cds se terminant par tag dans deux fichiers de sortie (un pour brin+, un pour brin-). Pareil pour les position 
if not os.path.exists(CDS_TAG_plus):
	print "Creation fasta contenant les CDS TAG et fichiers positions CDS TAG..."
	recuperer_cds_position_tag_tri(CDS_predits,CDS_TAG_plus,CDS_TAG_moins,position_CDS_TAG_plus,position_CDS_TAG_moins)

#2. Recuperer les positions intergeniques entre les CDS TAG
#if not os.path.exists(position_intergenique_plus): 
#	print "Position intergenique (+) ..." 
#	taille_genome=calculer_taille_genome(genome_complet)
#	recuperer_position_intergenique_normal(position_CDS_TAG_plus, position_intergenique_plus,taille_genome)
#if not os.path.exists(position_intergenique_moins): 
#	print "Position intergenique (-) ..."  
	recuperer_position_intergenique_complement(position_CDS_TAG_moins, position_intergenique_moins) 

#3. Recuperer les positions des CDS + region intergenique correspondante, pour ensuite les extraire du genome complet 
if not os.path.exists(position_cds_intergen_plus):  
	print "Position CDS + region intergenique (+)..." 
	recuperer_position_intergen_cds_normal(position_CDS_TAG_plus,position_intergenique_plus,position_cds_intergen_plus)
if not os.path.exists(position_cds_intergen_moins): 
	print "Position CDS + region intergenique (-)..."
	recuperer_position_intergen_cds_complement(position_CDS_TAG_moins,position_intergenique_moins,position_cds_intergen_moins) 

#4. Recuperer les sequences CDS+regions intergenique a partir du genome complet. Reverse-complementation des regions du brin -  
if not os.path.exists(region_cds_intergen_plus): 
	print"Region a conserver (+)..."
	recup_region_intergen_cds(genome_complet,position_cds_intergen_plus,region_cds_intergen_plus)
if not os.path.exists(region_cds_intergen_moins):
	print"Region a conserver (-)..."  		
	recup_region_intergen_cds(genome_complet,position_cds_intergen_moins,region_cds_intergen_moins)
	reverse_complementation_fichier_fasta(region_cds_intergen_moins,region_cds_intergen_moins_RC) 

#5. Liste des genes possibles pour chaque CDS (avec ou sans pyl) 
if not os.path.exists(genes_possibles_plus): 	
	print "Genes possibles (+)" 
	determiner_genes_possibles(region_cds_intergen_plus,genes_possibles_plus)
if not os.path.exists(genes_possibles_moins): 
	print "Genes possibles (-)" 
	determiner_genes_possibles(region_cds_intergen_moins_RC,genes_possibles_moins)

#6. Traduction des genes (avec et sans pyl) 
if not os.path.exists(protein_no_pyl_plus):
	print "Traduction (+)" 
	traduction_proteine(genes_possibles_plus,protein_no_pyl_plus)
	trad_pyrrolysine(protein_no_pyl_plus,protein_pyl_plus)  
if not os.path.exists(protein_no_pyl_moins): 
	print "Traduction (-)"
	traduction_proteine(genes_possibles_moins,protein_no_pyl_moins) 
	trad_pyrrolysine(protein_no_pyl_moins,protein_pyl_moins)	
